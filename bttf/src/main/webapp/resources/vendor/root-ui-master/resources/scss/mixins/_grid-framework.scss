@charset "utf-8";

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  @if $grid-type == 'float' {
    %grid-column {
      position: relative;
      float: left;
      min-height: 1px;
      padding-right: $gutter / 2;
      padding-left: $gutter / 2;
    }

    @if $enable-responsive-grid-classes {
      @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);
    
        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @extend %grid-column;
          }
        }
          
        @include media-breakpoint-up($breakpoint, $breakpoints) {
          // Provide basic `.col-{bp}` classes for equal-width flexbox columns	
          @for $i from 1 through $columns {
            .col#{$infix}-#{$i} {
              @include make-col($i, $columns);
            }
          }
        }
      }
    }@else {
      @for $i from 1 through $columns {
        .col-#{$i} {
          @extend %grid-column;
        }
      }

      @for $i from 1 through $columns {
        .col-#{$i} {
          @include make-col($i, $columns);
        }
      }
    }

  }@else {
    // Common properties for all breakpoints
    %grid-column {
      position: relative;
      width: 100%;
      padding-right: $gutter / 2;
      padding-left: $gutter / 2;
    }

    @if $enable-responsive-grid-classes {
      @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);
    
        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @extend %grid-column;
          }
        }
        .col#{$infix},
        .col#{$infix}-auto {
          @extend %grid-column;
        }
    
        @include media-breakpoint-up($breakpoint, $breakpoints) {
          // Provide basic `.col-{bp}` classes for equal-width flexbox columns
          .col#{$infix} {
            -ms-flex-preferred-size: 0;
            flex-basis: 0;
            -ms-flex-positive: 1;
            flex-grow: 1;
            max-width: 100%;
          }
          .col#{$infix}-auto {
            -ms-flex: 0 0 auto;
            flex: 0 0 auto;
            width: auto;
            max-width: 100%; // Reset earlier grid tiers
          }
    
          @for $i from 1 through $columns {
            .col#{$infix}-#{$i} {
              @include make-col($i, $columns);
            }
          }
    
          .order#{$infix}-first {
            -ms-flex-order: -1;
            order: -1;
          }
    
          .order#{$infix}-last {
            -ms-flex-order: $columns + 1;
            order: $columns + 1;
          }
    
          @for $i from 0 through $columns {
            .order#{$infix}-#{$i} {
              -ms-flex-order: $i;
              order: $i;
            }
          }
    
          // `$columns - 1` because offsetting by the width of an entire row isn't possible
          @for $i from 0 through ($columns - 1) {
            @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
              .offset#{$infix}-#{$i} {
                @include make-col-offset($i, $columns);
              }
            }
          }
        }
      }
    }@else {
      @for $i from 1 through $columns {
        .col-#{$i} {
          @extend %grid-column;
        }
      }
      .col,
      .col-auto {
        @extend %grid-column;
      }

      .col {
        -ms-flex-preferred-size: 0;
        flex-basis: 0;
        -ms-flex-positive: 1;
        flex-grow: 1;
        max-width: 100%;
      }
      .col-auto {
        -ms-flex: 0 0 auto;
        flex: 0 0 auto;
        width: auto;
        max-width: 100%; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order-first {
        -ms-flex-order: -1;
        order: -1;
      }

      .order-last {
        -ms-flex-order: $columns + 1;
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .order-#{$i} {
          -ms-flex-order: $i;
          order: $i;
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        .offset-#{$i} {
          @include make-col-offset($i, $columns);
        }
      }
    }
  }
}
